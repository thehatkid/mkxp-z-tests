name: Build

on:
  push:
    branches:
    - dev
    paths:
    - '.github/workflows/autobuild.yml'
    - 'src/**'
    - 'binding/**'
    - 'shader/**'
    - 'assets/**'
    - 'windows/**'
    - 'linux/**'
    - 'macos/**'
    - 'meson.build'
    - 'meson_options.txt'

  pull_request:
    branches:
    - dev
    paths:
    - '.github/workflows/autobuild.yml'
    - 'src/**'
    - 'binding/**'
    - 'shader/**'
    - 'assets/**'
    - 'windows/**'
    - 'linux/**'
    - 'macos/**'
    - 'meson.build'
    - 'meson_options.txt'

  workflow_dispatch:

jobs:
  build-windows:
    name: Windows (${{ matrix.msys.system }})
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        msys:
        - { system: mingw32, env: mingw-w64-i686, ruby-prefix: msvcrt }
        - { system: mingw64, env: mingw-w64-x86_64, ruby-prefix: x64-msvcrt }
        - { system: ucrt64, env: mingw-w64-ucrt-x86_64, ruby-prefix: x64-ucrt }

    steps:
      - name: Shorten commit SHA
        id: shorten-sha
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSYS2 (${{ matrix.msys.system }})
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys.system }}
          install: >-
            base-devel
            git
            ruby
            vim
            ${{ matrix.msys.env }}-autotools
            ${{ matrix.msys.env }}-cmake
            ${{ matrix.msys.env }}-gcc
            ${{ matrix.msys.env }}-meson

      - name: Dependencies cache
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: windows/build-${{ matrix.msys.system }}
          key: windows-${{ matrix.msys.system }}-${{ hashFiles('windows/Makefile') }}

      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        shell: msys2 {0}
        working-directory: ${{ github.workspace }}/windows
        run: make LTO=0

      - name: Build mkxp-z
        shell: msys2 {0}
        run: |
          source windows/vars.sh
          meson setup build
          meson compile -Cbuild

      - name: Prepare artifact
        shell: msys2 {0}
        run: |
          mkdir -v build/artifact
          cp -v build/mkxp-z.exe build/artifact/
          cp -v windows/build-${{ matrix.msys.system }}/bin/${{ matrix.msys.ruby-prefix }}-ruby310.dll build/artifact/
          cp -vr windows/build-mingw64/lib/ruby/3.1.0 build/artifact/rubylib
          cp -v mkxp.json build/artifact/
          cp -vr scripts build/artifact/scripts
          strip -S -x build/artifact/mkxp-z.exe
          strip -S -x build/artifact/${{ matrix.msys.ruby-prefix }}-ruby310.dll

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: mkxp-z_Windows_${{ matrix.msys.system }}_${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}_${{ steps.shorten-sha.outputs.sha }}
          path: build/artifact

  build-ubuntu-20:
    name: Ubuntu 20.04
    runs-on: ubuntu-20.04

    steps:
      - name: Shorten commit SHA
        id: shorten-sha
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y wget git vim ruby build-essential autoconf automake libtool pkg-config cmake bison libgl1-mesa-dev xorg-dev libxext-dev libasound2-dev libpulse-dev

      - name: Dependencies cache
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: linux/build-x86_64
          key: linux-x86_64-${{ hashFiles('linux/Makefile') }}

      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/linux
        run: make LTO=0

      - name: Build mkxp-z
        run: |
          source linux/vars.sh
          meson build --bindir=. --prefix=$GITHUB_WORKSPACE/build/artifact
          meson compile -Cbuild
          meson install -Cbuild

      - name: Prepare artifact
        run: |
          cp -vr linux/build-x86_64/lib/ruby/3.1.0 build/artifact/rubylib
          cp -v mkxp.json build/artifact/
          cp -vr scripts build/artifact/scripts
          strip -S -x build/artifact/mkxp-z.x86_64
          strip -S -x build/artifact/lib64/libruby.so.3.1

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: mkxp-z_Linux_Ubuntu-20.04_${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}_${{steps.shorten-sha.outputs.sha}}
          path: build/artifact

  build-macos:
    name: macOS
    runs-on: macos-latest

    steps:
      - uses: benjlevesque/short-sha@v2.2
        id: short-sha
        with:
          length: 7

      - name: Remove pre-existing homebrew packages
        run: brew remove --force $(brew list)

      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            macos/Dependencies/build-macosx-x86_64
            macos/Dependencies/build-macosx-arm64
            macos/Dependencies/build-macosx-universal
            macos/Dependencies/downloads
          key: mac-${{ hashFiles('macos/Dependencies/*.make', 'macos/Dependencies/*.sh') }}

      - name: Install Homebrew tools
        run: |
          cd macos/Dependencies
          brew bundle

      - name: Build all dependencies
        run: |
          cd macos/Dependencies
          ./setup.sh

      - name: Build app
        run: |
          cd macos
          xcodebuild -project mkxp-z.xcodeproj -configuration "Release" -scheme "Universal" -derivedDataPath "$GITHUB_WORKSPACE/build"

      - name: Compress app
        run: |
          cd build/Build/Products/Release
          ditto -c -k --sequesterRsrc --keepParent Z-universal.app Z-universal.app.zip

      - name: Upload archive
        uses: actions/upload-artifact@v3
        with:
          name: mkxp-z.macos.${{github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name}}-${{steps.short-sha.outputs.sha}}
          path: build/Build/Products/Release/Z-universal.app.zip
